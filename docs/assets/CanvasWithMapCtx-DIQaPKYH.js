var n=Object.defineProperty;var g=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a;var i=(e,t,a)=>(g(e,typeof t!="symbol"?t+"":t,a),a);import{gameParam as c}from"./gameConfig-DWGiOOs9.js";const s=class s{constructor(){i(this,"brickCtx");i(this,"bgCtx");i(this,"nextBrickCtx");i(this,"mapBinary");i(this,"bg");this.brickCtx=s.ctx,this.bgCtx=s.bgCtx,this.nextBrickCtx=s.nextBrickCtx,this.mapBinary=new Array(c.row).fill(0),this.bg=Array.from({length:c.row},()=>Array.from({length:c.column},()=>{})),this.cleanUpCanvas()}static initContext(t,a,r){this.canvas=t,this.bgCanvas=a,this.nextBrickCanvas=r,this.ctx=t.getContext("2d"),this.bgCtx=a.getContext("2d"),this.nextBrickCtx=r.getContext("2d"),this.canvas.height=this.bgCanvas.height=c.windowHeight,this.canvas.width=this.bgCanvas.width=c.windowWidth,this.nextBrickCanvas.height=c.brickHeight*4,this.nextBrickCanvas.width=c.brickWidth*4}cleanUpCanvas(){this.clearCanvas(this.brickCtx),this.clearCanvas(this.bgCtx)}clearCanvas(t){t.clearRect(0,0,t.canvas.width,t.canvas.height)}};i(s,"canvas"),i(s,"bgCanvas"),i(s,"ctx"),i(s,"bgCtx"),i(s,"nextBrickCanvas"),i(s,"nextBrickCtx");let h=s;export{h as default};
